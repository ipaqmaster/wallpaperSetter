#!/bin/bash
VERSION=0.6

#Display for 'feh' to throw wallpapers at.
export DISPLAY=':0'
_configFile="$(dirname $(realpath $0))/$(basename $0).conf"


function log {
  if [ ! -z $- ] ; then echo ${1} ; fi
  logger "$0 ${1}"
}

function dependencyChecker {
  #Search for tools and die if missing. Checks all arugments.
  _dependencies="$@"
  for program in $_dependencies
  do
    if ! which $program > /dev/null
      then
        echo "Dependency software :$tool: not found in your PATH. Please install/provide it or edit in a substitute" && exit 1
    fi
  done
}

function readConfig {
  #Sets vars from config, quits if they're not found.
  _wantedVars="$@" #What we search for

  for configOption in $_wantedVars
   do
      #If not found, warn and exit with an error
      if var=$(grep -E "^$configOption=.*$" $_configFile)
      then
        eval $var #Set it
      else
        echo "Cannot find variable :$configOption: in $_configFile, please set it before running"
	exit 1
      fi
  done

}

  #Generate the config if missing
if [ ! -f $_configFile ];
then
  cat > $_configFile << EOF
#Generated by version $VERSION

#Dirs and Options
WPDirectory="\$HOME/Wallpapers/"
WPRecursion="no"

  #Fill or Scale images to your monitors (Preference)
bgmode=fill
#bgmode=scale
EOF
fi

### GO

  #Check deps
dependencyChecker "date dirname feh find grep logger xrandr"

  # Set vars from conf
readConfig "WPDirectory WPRecursion bgmode"

  # Determine active displays
imageFetchCount="$(xrandr --query|grep -w 'connected'|wc -l)"

  # Set recursion level
if [ "$WDRecursion" == "no" ] ; then recurseFlag="-maxdepth 1"; fi
  # Get image list
wallpaperList="$(find "$WPDirectory" $recurseFlag)" 

  # Shuffle list and pick x images based on active displays
RandomlyChosen=$(echo "$wallpaperList"| shuf -n$imageFetchCount)

  # Build arguments for 'feh'
fehArguments=$(while read chosenImage ; do echo -n "--bg-$bgmode" "\"$chosenImage\" " ;   done <<<"$RandomlyChosen") #It wouldn't look like this if whitespace characters didn't ruin everything.

  #Log so people can check what was picked later.
log "$(basename $0) - $(date) - feh $fehArguments"

  #Eval our command.
eval feh $fehArguments
if [ $? -ne '0' ]; then exit 1; else exit 0; fi
