#!/bin/bash
VERSION=0.61

  # Fallback $DISPLAY variable to :0.
if [ -z $DISPLAY ]; then export DISPLAY=':0'; fi

_name="$(basename $0)"
_scriptRoot="$(dirname $(realpath $0))"
_configFile="$_scriptRoot/$(basename $0).conf"
_dbFile="$_scriptRoot/$(basename $0).db"
_dbTable="$(basename $0)"

source $_scriptRoot/functions

### Read any args

while [ $# -gt 0 ]
do
  case "$1" in
    -regendb|-regen)
	REGEN="1"
        shift
    ;;
     -verbose|-debug)
        VERBOSE="1" && DEBUG="1"
    ;;
     help|-help)
        help
    ;;
     *) /bin/echo "Unknown argument $1"
        help
    ;;
    esac
    shift
done


### GO

dependencyChecker "awk date dirname feh find grep identify logger xrandr"

readConfig "WPDirectory WPRecursion bgmode preferNativeRes dbStaleTime"

  # Determine active display count.
imageFetchCount="$(xrandr --query|grep -w 'connected'|wc -l)"

  # Regen db if requested. Do regular stale check otherwise.
if [ ! -z $REGEN ]; then genDb ; else dbPrep ; fi

  # Select x random images from the db based on active displays.
if [ "$preferNativeRes" == "yes" ]
then
  primaryRes="$(xrandr | grep \* | awk '{print $1}'|head -n1)"
  resQuery="where res = '$primaryRes'"
fi

randomImages="$(fetchRandomImages)"

log "DEBUG: randomImages = $randomImages"

  # Build arguments for 'feh'. Supports whitespace filenames.
fehArguments=$(while read chosenImage ; do echo -n "--bg-$bgmode" "\"$chosenImage\" " ;   done <<<"$randomImages")

  # Log what's been picked for later checking.
log "$(date) - feh $fehArguments"


  #Eval the final command.
eval feh $fehArguments
if [ $? -ne '0' ]; then exit 1; else exit 0; fi
