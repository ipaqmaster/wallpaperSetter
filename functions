#!/bin/bash

function log {
  if [[ $- =~ 'i' ]]; then logcommand=echo; else logcommand=logger; fi

  if [ "$DEBUG" == "1" ] && [[ "$1" =~ "DEBUG" ]]
  then
    echo "$_name - $@"
    logger "$_name - $@"
  elif [[ ! "$1" =~ "DEBUG" ]]
  then
    $logcommand "$_name - $@"
  fi
}

function dependencyChecker {
    # Check for all programs heard as args
  _dependencies="$@"
  for program in $_dependencies
  do
    if ! which $program > /dev/null 2>&1
      then
        missing="$missing$program "
    fi
  done

  if [ ! -z "$missing" ]; then echo "Dependency programs :$missing: not found in your PATH. Please provide the path, install their packages or provide a substitute." && exit 1; fi
}

function readConfig {
  #Generate the config if missing
if [ ! -f $_configFile ];
then
  cat > $_configFile << EOF
# Generated by version $VERSION
# This conf can be deleted at any time for a regenerated default copy.
}

###Dirs and Options

WPDirectory="\$HOME/Wallpapers/"
WPRecursion="no"

###Preferences

  # Fill or Scale images to display?
bgmode=fill
#bgmode=scale

  # Try to fetch current-resolution bgs only?
preferNativeRes=yes

  # Regenerate the DB if older than this many seconds
dbStaleTime="86400" # A day
EOF
fi

    # Sets vars from config, quits if they're not found.
  _wantedVars="$@" #What we search for

  for configOption in $_wantedVars
   do
      #If not found, warn and die
      if var=$(grep -E "^$configOption=.*$" $_configFile)
      then
        eval $var #Set it
      else
        echo "Cannot find variable :$configOption: in $_configFile, please set it or consider deleting an older configuration so I can regenerate a new one."
	exit 1
      fi
  done

}

function genDb {
  log "Database must be (re)generated.. stand by..."

    # Disable recursion if 'no' specified.
  if [ "$WPRecursion" == "no" ] ; then recurseFlag="-maxdepth 1"; fi

    # Find, identify dimensions and format findings as INSERT queries.
  allWallpapers="$(find "$WPDirectory" $recurseFlag -type f -exec echo -n \"{}\", \; -exec identify -format '"%wx%h"\n' {} 2>/dev/null \;|while read line; do echo "insert into $_dbTable values($line);"; done)"
  log "DEBUG: $allWallpapers"

    # Make the new file, table and populate it with the filename and dimensions.
  sqlite3 $_dbFile <<EOF
    DROP TABLE IF EXISTS $_dbTable;
    CREATE TABLE $_dbTable ( path varchar(255), res varchar(255) );
$allWallpapers
EOF
}

function dbPrep {
  if [ ! -f $_dbFile ]; then genDb; fi #If missing, generate.

  if [ "$(date -r $_dbFile +%s)" -lt "$(((`date +%s` - $dbStaleTime)))" ]
  then
    log "Database is over $_dbStaleTime seconds old, regenerating to catch new changes"
    genDb #Regen the database
  fi
}

function fetchRandomImages {

  randomimages="$(sqlite3 $_dbFile "select path from wallpaperSetter $resQuery order by random() limit $imageFetchCount;")"

  if [ "$(grep -v '^$' <<< "$randomimages" |wc -l)" -lt "$imageFetchCount" ]
  then
    log "DEBUG: Not enough $resQuery results for these monitors. Accepting any resolution"
    randomimages="$(sqlite3 $_dbFile "select path from wallpaperSetter order by random() limit $imageFetchCount;")"
    if [ "$(grep -v '^$' <<< $randomimages |wc -l)" -lt "$imageFetchCount" ]; then log "DEBUG: Couldn't find any images? Regenerating and exiting in panic" ; genDb ; exit 1; fi
  fi

  echo "$randomimages" | while read image # Check if they exist
  do
    log "DEBUG: testing whether :$image: exists."
    if [ ! -f "$image" ]; then log "Db returned non-existent image, regenerating..." ;genDb; fi
  done

  echo "${randomimages}"

}

function help {
  /bin/echo "Set random backgrounds automatically from $HOME/Wallpapers (Or another configured directory!)"
  /bin/echo "Usage examples:"
  /bin/echo "$0 (optional extras: -help -debug -regendb/-regen)"
  exit 1
}


